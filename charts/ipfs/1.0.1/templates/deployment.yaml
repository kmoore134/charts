{{ $scheme := "http" }}
apiVersion: {{ template "ipfs.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "ipfs.fullname" . }}
  labels:
    app: {{ template "ipfs.name" . }}
    chart: {{ template "ipfs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: {{ .Values.updateStrategy }}
  selector:
    matchLabels:
      app: {{ template "ipfs.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ template "ipfs.fullname" . }}
      labels:
        app: {{ template "ipfs.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "ipfs.serviceAccountName" . | quote }}
      initContainers:
        - name: init-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/bin/sh', '-c', '[ ! -e /data/ipfs/config ] && (/usr/local/bin/ipfs init ; chown -R 1000:100 /data/ipfs) ; exit 0']
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-api
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/usr/local/bin/ipfs', 'config', 'Addresses.API', "/ip4/0.0.0.0/tcp/{{ .Values.service.apiPort}}"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-gateway
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/usr/local/bin/ipfs', 'config', 'Addresses.Gateway', "/ip4/0.0.0.0/tcp/{{ .Values.service.gatewayPort}}"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-swarm
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/usr/local/bin/ipfs', 'config', '--json', 'Addresses.Swarm', "[\"/ip4/0.0.0.0/tcp/{{ .Values.service.swarmPort}}\",\"/ip4/0.0.0.0/tcp/{{ .Values.service.swarmPort}}/quic\"]" ]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-access-origin
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/usr/local/bin/ipfs', 'config', '--json', 'API.HTTPHeaders.Access-Control-Allow-Origin', "[\"*\"]" ]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-access-methods
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['/usr/local/bin/ipfs', 'config', '--json', 'API.HTTPHeaders.Access-Control-Allow-Methods', "[\"PUT\",\"POST\"]" ]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
        - name: init-chown
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ['chown', '1000:100', '/data/ipfs/config']
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /data/ipfs
            - name: staging
              mountPath: /export
          ports:
            - name: swarm
              containerPort: 9401
            - name: api
              containerPort: 9501
            - name: gateway
              containerPort: 9880
          {{- if .Values.environment }}
          env:
            {{- range $envVariable := .Values.environment }}
            {{- if and $envVariable.name $envVariable.value }}
            - name: {{ $envVariable.name }}
              value: {{ $envVariable.value | quote }}
            {{- else }}
              {{- fail "Please specify name/value for environment variable" }}
            {{- end }}
            {{- end}}
          {{- end }}
      volumes:
        - name: data
        {{- if .Values.emptyDirVolumes }}
          emptyDir: {}
        {{- else }}
          hostPath:
            path: {{ template "configuredHostPathData" . }}
        {{- end }}
        - name: staging
        {{- if .Values.emptyDirVolumes }}
          emptyDir: {}
        {{- else }}
          hostPath:
            path: {{ template "configuredHostPathStaging" . }}
        {{- end }}
